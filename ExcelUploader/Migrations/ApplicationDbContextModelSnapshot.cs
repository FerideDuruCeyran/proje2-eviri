// <auto-generated />
using System;
using ExcelUploader.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExcelUploader.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExcelUploader.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acec07c4-e38d-4f58-8de7-660f8dc6765a",
                            CreatedAt = new DateTime(2025, 8, 29, 7, 45, 48, 874, DateTimeKind.Utc).AddTicks(3183),
                            Email = "admin@exceluploader.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXCELUPLOADER.COM",
                            NormalizedUserName = "ADMIN@EXCELUPLOADER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFrv79kNe61x1x1N+nBKCUU/3/p44ua0l7Qwszrk9ctxNx6G/galWv7HMEQhX1MIjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d056241-c713-4d03-a583-83eda4c8dde3",
                            TwoFactorEnabled = false,
                            UserName = "admin@exceluploader.com"
                        });
                });

            modelBuilder.Entity("ExcelUploader.Models.DatabaseConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("LastTestResult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DatabaseConnections");
                });

            modelBuilder.Entity("ExcelUploader.Models.DynamicTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RowCount")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileName");

                    b.HasIndex("TableName")
                        .IsUnique();

                    b.HasIndex("UploadDate");

                    b.ToTable("DynamicTables");
                });

            modelBuilder.Entity("ExcelUploader.Models.ExcelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Ad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdresIl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdresUlke")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AkademikDonem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AkademikOrtalama")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("AkademikYil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankaAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankaHesapNumarasi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankaHesapSahibi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankaIBANNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankaSubeAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankaSubeKodu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BasvuruAciklama")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("BasvuruDurumu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BasvuruSayfasi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BasvuruTarihi")
                        .HasColumnType("date");

                    b.Property<string>("BasvuruTipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BasvuruYili")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BirimAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Burs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cinsiyet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegisimProgramiTipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiplomaDerecesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DogumTarihi")
                        .HasColumnType("date");

                    b.Property<string>("DogumYeri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FakulteAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GaziSehitYakini")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GerceklesenToplamHibeliGun")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HareketlilikBaslangicTarihi")
                        .HasColumnType("date");

                    b.Property<DateTime?>("HareketlilikBitisTarihi")
                        .HasColumnType("date");

                    b.Property<string>("HareketlilikTipi")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HibeButceYili")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HibeOdemeOrani")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("HibeOdeneceklerToplami")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HibeOdenenlerToplami")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("HibeSozlesmeTipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("KatilmakIstedigiYabanciDilSinavi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OdemeOrani")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("OdemeTarihi")
                        .HasColumnType("date");

                    b.Property<string>("OdemeTipi")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Odendiginde")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Odenecek")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OgrenciNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasaportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanlananToplamHibeliGunSayisi")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("SinavDili")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SinavPuani")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("SinavTarihi")
                        .HasColumnType("date");

                    b.Property<string>("SinavTipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sinif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SistemDisiGecmisHareketlilik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SistemIciGecmisHareketlilikBilgisi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TCKimlikNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Taksit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TercihDurumu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TercihSirasi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tercihler")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversiteKoordinatoru")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversiteKoordinatoruEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversiteUluslararasiKodu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversitedeToplamCalismaSuresi")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Unvan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UzmanlikAlani")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YurtBasvurusu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Ad");

                    b.HasIndex("BasvuruYili");

                    b.HasIndex("FileName");

                    b.HasIndex("HareketlilikTipi");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("OdemeTipi");

                    b.HasIndex("OgrenciNo");

                    b.HasIndex("Soyad");

                    b.HasIndex("TCKimlikNo");

                    b.HasIndex("UploadDate");

                    b.ToTable("ExcelData");
                });

            modelBuilder.Entity("ExcelUploader.Models.TableColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ColumnOrder")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DynamicTableId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicTableId", "ColumnOrder");

                    b.ToTable("TableColumns");
                });

            modelBuilder.Entity("ExcelUploader.Models.TableData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DynamicTableId")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("DynamicTableId", "RowNumber");

                    b.ToTable("TableData");
                });

            modelBuilder.Entity("ExcelUploader.Models.UserLoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("IsSuccessful");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExcelUploader.Models.TableColumn", b =>
                {
                    b.HasOne("ExcelUploader.Models.DynamicTable", "DynamicTable")
                        .WithMany("Columns")
                        .HasForeignKey("DynamicTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicTable");
                });

            modelBuilder.Entity("ExcelUploader.Models.TableData", b =>
                {
                    b.HasOne("ExcelUploader.Models.TableColumn", "Column")
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ExcelUploader.Models.DynamicTable", "DynamicTable")
                        .WithMany("Data")
                        .HasForeignKey("DynamicTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("DynamicTable");
                });

            modelBuilder.Entity("ExcelUploader.Models.UserLoginLog", b =>
                {
                    b.HasOne("ExcelUploader.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExcelUploader.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExcelUploader.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExcelUploader.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExcelUploader.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcelUploader.Models.DynamicTable", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
